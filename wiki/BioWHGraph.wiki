#summary The BioWHGraph class

The BioWHGraph class [http://jbiowh.googlecode.com/svn/wiki/javadoc/org/jbiowh/core/utility/graph/BioWHGraph.html JavaDoc] and [http://code.google.com/p/jbiowh/source/browse/trunk/src/main/java/org/jbiowh/core/utility/graph/BioWHGraph.java code]

JBioWH also  includes a global class called !BioWHGraph which can be used to create complex graphs from queries.  The graph created by this class is a set of vertices that are the biological objects (Taxonomy, Genes, Proteins, etc.) and a set of edges that are the relationship between them.  The graph is created using a recursive algorithm following the JPA relationship between the entities. This approach permits the creation of directed or undirected graphs, including weighted edges, depending on the relationship between the vertices. In addition, the class provides a set of methods to retrieve some of the most common properties of the graph such as node connectivities, size and diameter of a graph, etc., and it also allows operations like shortest path identification.  
 
The !BioWHGraph class can be extended by the users  to create different kind of graphs (also see the examples below). This extension offers the possibility to create graphs using the biological objects as edges instead of the relationship between them. Currently two classes are available,  the TaxonomyGraph class and the ProteinProteinGraph class. TaxonomyGraph creates a directed graph with the hierarchical structure starting from a Taxonomy parent. This particular graph is useful in queries to be executed over an entire taxon such as a genus or family. ProteinProteinGraph creates an undirected and weighted graph of protein-protein interactions. This class uses the Protein-Protein interaction datasets (MIF25) to create the edges between the proteins using the !MIFEntryInteraction class. The edges are weighted depending on how many times each interaction is reported by different datasets. 

The class use the [http://jgrapht.org/ Jgrapht] and [http://www.jgraph.com/ JGraph] java libraries to handled and visualize the graphs.

The [http://jbiowh.googlecode.com/svn/wiki/javadoc/org/jbiowh/core/utility/graph/BioWHGraph.html#populate(java.lang.Object) populate] method is used to create the graph from a JBioWH main entity. This method uses the variable [http://jbiowh.googlecode.com/svn/wiki/javadoc/org/jbiowh/core/utility/graph/BioWHGraph.html#depth depth] which is the limit for recursive iterations. If the depth value is set to {{{-1 }}} the recursive iterations won't be limited.

This class uses the singleton class [http://jbiowh.googlecode.com/svn/wiki/javadoc/org/jbiowh/core/utility/jparelationship/JpaEntitiesSelected.html JpaEntitiesSelected] to storage into the [http://jbiowh.googlecode.com/svn/wiki/javadoc/org/jbiowh/core/utility/jparelationship/JpaEntitiesSelected.html#getEntities() entities] list the entities classes that will be included on the graph creation process.

See [Example10 Example 10]