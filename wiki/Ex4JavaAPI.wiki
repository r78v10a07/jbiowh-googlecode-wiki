#summary This is the Example 4 using the Java API

= Search all human genes which are linked to asthma drugs using the Java API =

Create a text file called .java

<code language="java">
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.jbiowh.core.datasets.dataset.DataSetFactory;
import org.jbiowh.core.datasets.drug.drugbank.entities.DrugBank;
import org.jbiowh.core.datasets.drug.drugbank.search.SearchDrugBank;
import org.jbiowh.core.datasets.gene.entities.GeneInfo;
import org.jbiowh.core.datasets.protein.entities.Protein;
import org.jbiowh.core.dbms.WHDBMS;
import org.jbiowh.core.dbms.WHDBMSFactory;
import org.jbiowh.core.dbms.mysql.WHMySQL;
import org.jbiowh.core.dbms.sql.exception.SQLConstrainException;
import org.jbiowh.core.logger.VerbLogger;

/**
 * This class is to use the jbiowh Java API to search all gene linked to asthma
 * Drugs list
 *
 * @author rvera
 */
public class FoundGenefromDrug {

    /**
     * This is the Main method
     *
     * @param args the command line arguments
     * @throws SQLConstrainException
     */
    public static void main(String[] args) throws SQLConstrainException {
        /*
         * Set the verbose level to Info
         */
        VerbLogger.setLevel(VerbLogger.INFO);
        /*
         * This static method set the DBMS type (MySQL) option to setup a
         * connection
         */
        WHDBMS.setWhdbmsFactory(new WHMySQL("com.mysql.jdbc.Driver",
                "jdbc:mysql://localhost:3306/biowh", "biowh", "mypass"));

        /*
         * This method return the DBMS Factory
         */
        WHDBMSFactory whdbmsFactory = WHDBMS.getWhdbmsFactory();

        /*
         * This method return open the conection with the DBMS returns 1 if the
         * conection is opened successfully
         */
        if (whdbmsFactory.openConnection() == 1) {
            /*
             * This line set the Persistence EntityManagerFactory
             */
            DataSetFactory.setWHEntityManager();

            /*
             * Create the SearchFactory
             */
            SearchDrugBank searchDrugBank = new SearchDrugBank();

            /*
             * This HashSet will be used to storage the obtained Genes
             */
            Set<GeneInfo> genes = new HashSet<>();

            /*
             * This is the list to storage the list to be used in the search
             * specifing the FIELD is a List<List> object with the internal list
             * has 4 elements.
             */
            List searchParameters = new ArrayList();

            /*
             * List with the FIELD to be searched. The first element is the
             * logical operator to link with the previous condition (empty
             * string for the first list). The second element is the FIELD on
             * the DataSet to be used to compare. The third element is the
             * operator to compare.
             */
            List indcationParameters = new ArrayList();
            indcationParameters.add("");
            indcationParameters.add(SearchDrugBank.INDICATION);
            indcationParameters.add("like");
            indcationParameters.add("% asthma %");

            searchParameters.add(indcationParameters);
            List<DrugBank> drugs = searchDrugBank.search(searchParameters, null);

            if (!drugs.isEmpty()) {
                for (DrugBank d : drugs) {
                    if (!d.getProtein().isEmpty()) {
                        for (Protein p : d.getProtein()) {
                            genes.addAll(p.getGeneInfo());
                        }
                    }
                }
            }

            System.out.println("We found " + genes.size() + " genes linked with asthma drugs");

        }
    }
}
</code>

The obtained gene number is the same that in the others methods.

http://jbiowh.googlecode.com/svn/wiki/images/Ex4_10.jpg
