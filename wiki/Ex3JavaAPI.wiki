#summary This is the Example 3 using the Java API

= Search all human proteins which are linked to all elements on the Ontology list using the Java API =

Create a text file called FindALLHumProtinGOwithConst.java

<code language="java">
import java.util.ArrayList;
import java.util.List;
import org.jbiowh.core.datasets.dataset.DataSetFactory;
import org.jbiowh.core.datasets.ontology.entities.Ontology;
import org.jbiowh.core.datasets.ontology.search.SearchOntology;
import org.jbiowh.core.datasets.protein.entities.Protein;
import org.jbiowh.core.datasets.protein.search.SearchProtein;
import org.jbiowh.core.datasets.taxonomy.entities.Taxonomy;
import org.jbiowh.core.datasets.taxonomy.search.SearchTaxonomy;
import org.jbiowh.core.dbms.WHDBMS;
import org.jbiowh.core.dbms.WHDBMSFactory;
import org.jbiowh.core.dbms.mysql.WHMySQL;
import org.jbiowh.core.dbms.sql.exception.SQLConstrainException;
import org.jbiowh.core.logger.VerbLogger;
import org.jbiowh.core.utility.constrains.JPLConstrains;

/**
 * This class is to use the jbiowh Java API to search all human protein in a GO
 * list
 *
 * @author rvera
 */
public class FindALLHumProtinGOwithConst {

    /**
     * This is the Main method
     *
     * @param args the command line arguments
     * @throws SQLConstrainException
     */
    public static void main(String[] args) throws SQLConstrainException{
        /*
         * Set the verbose level to Info
         */
        VerbLogger.setLevel(VerbLogger.INFO);
        /*
         * This static method set the DBMS type (MySQL) option to setup a
         * connection
         */
        WHDBMS.setWhdbmsFactory(new WHMySQL("com.mysql.jdbc.Driver",
                "jdbc:mysql://localhost:3306/biowh", "biowh", "mypass"));

        /*
         * This method return the DBMS Factory
         */
        WHDBMSFactory whdbmsFactory = WHDBMS.getWhdbmsFactory();

        /*
         * This method return open the conection with the DBMS returns 1 if the
         * conection is opened successfully
         */
        if (whdbmsFactory.openConnection() == 1) {
            /*
             * This line set the Persistence EntityManagerFactory
             */
            DataSetFactory.setWHEntityManager();

            /*
             * Create the SearchTaxonomy factory
             */
            SearchTaxonomy searchTaxonomy = new SearchTaxonomy();
            SearchOntology searchOntology = new SearchOntology();
            SearchProtein searchProtein = new SearchProtein();

            /*
             * This method search the human taxonomy This sentence return a list
             * with only one member: The human taxonomy object
             */
            List<Taxonomy> taxonomies = searchTaxonomy.search("human", null);
            if (!taxonomies.isEmpty()) {
                System.out.println("Using the taxonomy: " + taxonomies.get(0).getTaxonomySynonym("scientific name"));

                /*
                 * Searching the Ontologies
                 */
                List<Ontology> ontologies1 = searchOntology.search("GO:0009100", null);
                List<Ontology> ontologies2 = searchOntology.search("GO:0009101", null);

                for (Ontology o : ontologies1) {
                    System.out.println("Using the ontology: " + o.getId());
                }
                for (Ontology o : ontologies2) {
                    System.out.println("Using the ontology: " + o.getId());
                }

                /*
                 * Here we create the list needed to create a JPLConstrains
                 * object
                 */
                List constrainsO = new ArrayList();
                List operationsO = new ArrayList();
                List extOperationsO = new ArrayList();
                constrainsO.add(ontologies1);
                constrainsO.add(ontologies2);
                operationsO.add("IN");
                operationsO.add("IN");
                extOperationsO.add("AND");
                
                JPLConstrains ontAsConstrain = new JPLConstrains(constrainsO, operationsO, extOperationsO);
                
                
                List constrains = new ArrayList();
                List operations = new ArrayList();
                List extOperations = new ArrayList();
                constrains.add(taxonomies);
                constrains.add(ontAsConstrain);
                operations.add("IN");
                operations.add("IN");
                extOperations.add("AND");
                JPLConstrains taxAndOntAsConstrain = new JPLConstrains(constrains, operations, extOperations);

                /*
                 * Return all proteins under the taxAsConstrain condition
                 */
                List<Protein> proteins = searchProtein.search("", taxAndOntAsConstrain);
                System.out.println("We found " + proteins.size() + " human proteins");
            }
        }
    }
}
</code>

The obtained result is the same that in the others methods.

http://jbiowh.googlecode.com/svn/wiki/images/Ex3_10.jpg

*Note:* use the GO Id GO:0019904 and GO:0051220 with the same procedure and the result shows that the 1433B_HUMAN protein is linked to these GO terms. 