#summary This the introduction on the Relational Schema

= Introduction =

A relational and scalable schema is designed to provide data warehouse capabilities giving the possibility to integrate new biological objects without affect the database use. It is created by modules, where each module is related to a specific biological object. Also, the module contains all complementary data for that biological object which could be provided by a single data source or by multiple data sources. All the information provided by the data sources is preserved in the database without any modifications. Finally, the relational schema contains the links and references between the biological objects. 

The first modules integrated on this framework, which are the relational schema basement, are:

 * Taxonomy module based on the [http://www.ncbi.nlm.nih.gov/Taxonomy/ NCBI Taxonomy] data source
 * Ontology module based on the [http://www.geneontology.org/ GeneOntology] data source

The second group are:

 * Gene module based on the [http://www.ncbi.nlm.nih.gov/gene/ Gene] and the KEGG Gene data sources
 * Protein module based on the [http://www.uniprot.org/ Uniprot] data source, with both branches SWISSPROT and TREMBL
 * Protein-Protein Interaction module based on the PSI 25 file format. The data sources included are [http://mint.bio.uniroma2.it/mint/Welcome.do MINT], [http://dip.doe-mbi.ucla.edu/dip/Main.cgi DIP], [http://thebiogrid.org/ BioGrid] and [http://www.ebi.ac.uk/intact/ IntAct]
 * Protein Clusters module based on the [http://www.uniprot.org/help/uniref UniRef]
 * Drug module based on the [http://www.drugbank.ca/ DrugBank]
 * Pathway module based on the [http://www.genome.jp/kegg/ KEGG] data source with all its internal data types as KEGG Compound, Glycan, Reaction, Enzyme, Gene and Pathway.
 * Disease module based on the [http://www.omim.org/ OMIM] data source and is linked to the Gene module. 
 * ProtFam module based on the [http://pfam.sanger.ac.uk/ PFAM] data source
 * Protein groups module based on the following data sources with their on small modules. [http://pir.georgetown.edu/pirwww/search/pirsfscan.shtml Pirsf], [http://www.ncbi.nlm.nih.gov/COG NCBI COG] (also includes the [http://eggnog.embl.de eggNOG] database), [http://orthoxml.org OrthoXML] (the [http://omabrowser.org OMA] database as an example) data sources 

All biological objects are linked together giving the possibility to create complex queries through the inserted data.

The following figure shows the relationship between the JBioWH modules.

http://jbiowh.googlecode.com/svn/wiki/images/EntitiesRelationship.png

As previously explained the *!DataSet* table is used to storage the biological data sources information. The *WID* field is the primary key used as foreign key in the tables who storage the different dataset types. The *WID* values for the dataset can take continuous integer values between 1 and 999999.The fields into the !DataSet table are understandable by itself. 

http://jbiowh.googlecode.com/svn/wiki/images/DataSet.png 

The other main table into the system is the *WIDTable* showed in the next figure. The last *WID* number, used as a primary key into the relational database, plus one is storage in the field *PreviousWID* of this table. This number can take integer values greater than 1000000 in a continuous way to be used as primary key for the data inserted into the datasets tables.  The kind of Id acts as a normalization key to establish the relationships between the tables into the relational schema due to the different id used by the original data sources.

http://jbiowh.googlecode.com/svn/wiki/images/WIDTable.png

The next figure shows the main relational schema with the tables of the included datasets and the relationship between them. Each dataset type will be explained in next sessions. 

http://jbiowh.googlecode.com/svn/wiki/images/General.png

The relational schema for each dataset is designed to storage the complete data source. So, the relational schema is just a reorganization and representation of the original data source. The inserted data does not have any modification in this first stage; therefore, data is transformed and storage into the relational schema entirely. Further data representations and modification to be used in particular problems will be executed as database views of this main database.